+==========================================+
| Mesopotamia Communication Protocol 1.2.1 |
|			    Shatt al-Arab              |
|         (C) Niklas Weissner 2014         |
+==========================================+




Contents
========

	1	-	Changelog
	2	-	Foreword
	3	-	Basic communication
	4	-	Basic packet structure
	5	-	Packet types
	6	-	Security
	
	
	
	
1 - Changelog
=============
4.2.2014	1.0		Initial creation of protocol

5.2.2014	1.1		Added LOGOUT-,QUERY-,DATA- and ERROR-packets and NACK-response to LOGIN, Basic communication chapter

24.2.2014	1.2		Removed QUIT-packet, added ACCEPT-packet and defined a basic salting procedure (chapter "Security")

25.2.2014	1.2.1	Changed salting procedure to append salt to hashed password instead of unencrypted password



2 - Foreword
============
	This is the specification for the Mesopotamia Communication Protocol (MCP) used by the
	Mesopotamia producation-surveillance-system consisting of the client (codename "Tigris") and
	the Glassfish-based server (codename "Euphrates"). 
	This protocol is build around Websocket technology and uses the JavaScript Object Notation (JSON) 
	for packet wrapping. 
	The JSON specification is provided under the licence viewable at [http://www.json.org/license.html].
	
	
	
	
3 - Basic communiaction
=======================

	A connection is opened with a client sending a HANDSHAKE. The server may abandon a connection that
	isn't HANDSHAKE'd after a given timeout. 
	When a HANDSHAKE is answered by the server using an ACCEPT packet, the client may continue with a LOGIN process.




4 - Basic packet structure
==========================

	Packets are in JSON-format and must at least contain the following fields:

		int: typeID
		
		int: uid
		
		struct: data //Packet-specific	
		
	
	-typeID:
		The type of the packet. For a detailed description of possible values see "Packet types"
		
	-uid:
		An unique ID that is echoed on responses to packets in order to clearly identify responses to sent packets.
		An UID is generated when the client/server sends a packet. To avoid collisions in UID generation,
		the client generates only even UIDs while the server generates only the odd ones.
		When a response to a given UID was received, the sender may re-use the UID of the packets.
		As an exception, the ERROR-packet needs no UID, as it is allowed as a response to any packet. (Although
		the UID field is ignored on ERROR-packets, it still has to be included in order to form a valid packet)
	
	-data:
		The contents of the data struct are packet specific and are explained in chapter "Packet types"

	
	If the server/client receives a message that is not a valid packet (not in JSON-format / required fields
	not defined) it should ignore the message, print out an error notification and abandon the connection.




5 - Packet types
================

	Packet ID	|	Direction	|	Packet type	|
	------------+---------------+---------------+---
			1	|	C->S		|	HANDSHAKE	|
			2	|	S->C		|	ACCEPT		|	
			10	|	C->S		|	LOGIN		|
			11	|	S->C		|	AUTH		|
			12	|	C->S		|	RELOG		|
			13	|	S->C		|	REAUTH		|
			14	|	Both		|	LOGOUT		|
			20	|	C->S		|	QUERY		|
			21	|	S->C		|	DATA		|
			200	|	Both		|	ACK			|
			201	|	Both		|	NACK		|
			242	|	Both		|	ERROR		|
	
			
	HANDSHAKE
	---------
	Sent by client to initiate a connection; should be sent right after the client has
	been loaded up so incompatible versions / a not reachable server can be identified.
	
	-Packet ID:		1
	
	-Direction:		C->S
	
	-Data fields:
		string: 	clientVersion
		
	-Possible responses:
		ACCEPT:		If connection is accepted (client is listed as peer by server, server transmits salt for secure login)
		NACK:		If connection is refused (incompatible client version/ blocked IP etc.)
		
		
		
	ACCEPT
	------
	Sent by the server for accepting the HANDSHAKE of a client. This packet contains a random salt string that is
	used for safely transmitting sensitive data like passwords on non-secure connections(http/ws). For more information
	see chapter "6 - Security".
	A client that receives an ACCEPT as an answer to it's HANDSHAKE is able to continue with the login procedure.
	
	-Packet ID:		2
	
	-Direction:		S->C
	
	-Data fields:
		string:		salt (Random salt string, for more information see chapter "6 - Security")
		
	-Possible responses:
		none (packet is response-only)
		
		
		
		
	LOGIN
	-----
	Sent by client to login on the server and to receive session information for
	querying data.
	
	-Packet ID:		10
	
	-Direction:		C->S
	
	-Data fields:
		string: 	username
		string: 	passwordHash (SHA-256-Hash of password + salt, for more information see chapter "6 - Security")
		
	-Possible responses:
		AUTH:		If login succeeds (AUTH-packet contains session information)
		NACK:		If login fails
		
		
		
		
	AUTH
	----
	Sent by server as a response to successful login. Session information and 
	user-specific configuration is included in packet.
	
	-Packet ID:		11
	
	-Direction:		S->C
	
	-Data fields:
		string:		sessionID
		struct:		userConfig (Fields of this structure are documented in a later version of the protocol)
		
	-Possible responses:
		none (packet is response-only)
		
		
		
		
	RELOG
	------
	Sent by client when it already has a session key(from a cookie etc.) and needs to check
	if it is still usable. If the server responds with a REAUTH the client is still allowed to
	query data without a new login.
	
	-Packet ID:		12
	
	-Direction:		C->S
	
	-Data fields:
		string:		sessionID (the session ID that needs to be checked and re-registered)
		
	-Possible responses:
		REAUTH:		If session is still active
		NACK:		If session has expired (client needs a new login)
		
		
		
		
	REAUTH
	------
	Sent by server as a response to a RELOG packet if the sent session key is still valid. The server
	is able to replace the old session key by a new one for safety reasons.
	
	-Packet ID:		13
	
	-Direction:		S->C
	
	-Data fields:
		string:		newSessionID (is used for further connections by client)
		struct:		userConfig (Fields of this structure are documented in a later version of the protocol)
		
	-Possible results:
		none (packet is response-only)
		
		
	
	
	LOGOUT
	------
	Sent by server/client to close a session without terminating the connection. A reason can be included
	in the form of a numerical code and a human-readable message string.
	
	-Packet ID:		14
	
	-Direction:		Both
	
	-Data fields:
		string:		sessionID (is ignored if sent by the server)
		int:		reasonCode(a technical ID for identifying the logout reason. List of possible values: see "Notes")
		string:		reasonMessage(a human-readable message that might be displayed in a message dialog/server log)
		
	-Possible results:
		none (logout needs no confirmation)
	
	-Notes:
		Possible values for the reasonCode-field are:
		0 = UNKNOWN
		1 = CLOSED_BY_USER
		2 = SESSION_EXPIRED
		3 = INTERNAL_ERROR
		4 = REFUSED
		
		
	
	
	QUERY
	-----
	Sent by the client to query MES data. The server answers the query by sending a DATA-packet.
		!!! This packet will be further documented as soon as a data model
		!!! is available. Until then it is not neccesary to implement
		!!! its functionalities.
	
	-Packet ID:		20
	
	-Direction:		C->S
	
	-Data fields:
		string:		sessionID
		struct:		filterData (Fields of this structure are documented in a later version of the protocol)
		
	-Possible responses:
		DATA:		If the query succeeds and MES-data is transferred
		NACK:		If the provided session key has expired
 	
	
	
	
	DATA
	----
	Send by the server spontaneously or as a response to a QUERY-packet.
		!!! This packet will be further documented as soon as a data model
		!!! is available. Until then it is not neccesary to implement
		!!! its functionalities.
	
	-Packet ID:		21
	
	-Direction:		S->C
	
	-Data fields:
		struct:		queryResult (Fields of this structure are documented in a later version of the protocol)
		
	-Possible responses:
		none (packet is response-only)
	
	
	
	
	ACK
	---
	Sent by client/server as a response to packets with no specific return data. An ACK represents a
	successful request while a NACK reports a failure.
	
	-Packet ID:		200
	
	-Direction:		Both
	
	-Data fields:
		none
		
	-Possible responses
		none (packet is response-only)
		
		
		
		
	NACK
	----
	Sent by client/server as a response to packets with no specific return data. An ACK represents a
	successful request while a NACK reports a failure.
	
	-Packet ID:		201
	
	-Direction		Both
	
	-Data fields:
		none
		
	-Possible responses
		none (packet is response-only)
		
	
	
	
	ERROR
	-----
	Sent by client/server to report an error. This special packet can be sent as a response to any
	packet to report an error.
	
	-Packet ID:		242
	
	-Direction:		Both
	
	-Data fields:
		int:		errorCode (a technical ID for identifying the error. List of possible values: see "Notes")
		string:		errorMessage (a human-readable message that might be displayed in a message dialog/server log)
		
	-Possible responses:
		none (Packet is one-way)
		
	-Notes:
		Possible values for the errorCode-field are:
		0 = UNKNOWN
		1 = INVALID_PACKET (An unexpected packet occurred; e.g.: response-only-packet was sent as a request packet)
		2 = SESSION_EXPIRED (A query was made with an invalid session key)
		3 = INTERNAL_EXCEPTION  (An internal exception has occurred)
		4 = INVALID_RESPONSE (A packet was answered with an incompatible packet type)
	
	
	
	
6 - Security
============

	To prevent user login credentials to be stolen, the MCP uses a simple but effective salting procedure.
	
	When a connection is opened, the server generates a random string of arbitrary length ( > 0) which is
	sent to the client (included in the response to HANDSHAKE). This string is stored by both the client and the
	server in relation to the connection.
	
	When the client wishes to login, it takes the unencrypted password, hashes it using the SHA-256 algorithm and appends
	the random salt string as received by the server to the has value encoded in hexadecmial format with lowercase letters. 
	The resulting string is again hashed using SHA-256. The resulting hash value can in turn be transmitted as password 
	in the LOGIN packet.
	
	The double hashing provides additional security, as it makes storage of unencrypted passwords in the server database
	unnecessary. Using this method, the only person who can know the password associated with a username is the user himself, even
	when hackers intrude the database.
	
	In order to check the correctness of the password, the server has to load the password associated with the transmitted username 
	from the database and encrypt the password in exactly the same way as the client did using the same random salt string.
	When only the password hashes are stored in the database like suggested in the paragraph above, the server may skip the
	first hashing, as the hashed password (without salt) is already obtained from the database. 
	If the resulting string matches with the one recieved by the client in the LOGIN packet, the password is correct.
	
	It is important that the salt string is different for any connection, so when a hacker intercepts a login packet and reads out
	the password hash, he is not able to use this hash on an other connetion.
	
	It is necessary that both the client and the server use the same coding for string representations of hash values.
	As of MCP 1.2.1 the default coding is hexadecimal with lowercase letters (0123456789abcdef). Leading zeroes must NOT be omitted.
	
	For illustration (and stupid people), here is an example login procedure:
	
		|	A user opens the Tigris client webapp. After HANDSHAKING, the server transmits the salt string "1234randomSaltString".
		|
		|	The user logs in using the username "otto" and the password "foobar".
		|	
		|	The client takes the password entered and calculates the SHA-256 hash value, which is:
		|		c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2
		|
		|	It now appends the salt received by the server, yielding the string
		|		"c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f21234randomSaltString"
		|
		|	This string is now hashed again using SHA-256 which results in the hash value:
		|		8e8f8789710978ca5ac74cf6abecfaffc4d8c6b2a696b27b215df538ea6581a8
		|
		|	This value is now transmitted to the server together with the username "otto".
	
	
